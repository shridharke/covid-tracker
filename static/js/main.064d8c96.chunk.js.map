{"version":3,"sources":["InfoBox.js","Table.js","util.js","LineGraph.js","Map.js","App.js","serviceWorker.js","index.js","sunlogo.png","moon.svg"],"names":["InfoBox","title","active","cases","casesType","total","props","infoClass","onClick","className","color","Table","countries","map","country","recovered","deaths","todayCases","todayRecovered","todayDeaths","casesTypeColors","hex","multiplier","sortData","data","sort","a","b","options","responsive","legend","display","elements","point","radius","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","gridLines","type","time","tooltipFormat","yAxes","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","lineColors","border","bg","length","datasets","backgroundColor","borderColor","Map","center","zoom","dark","GeoJSON","style","fillColor","weight","mapData","features","Circle","countryInfo","lat","long","fillOpacity","Math","sqrt","Popup","showDataOnMap","App","JSON","parse","localStorage","getItem","darkMode","setDarkMode","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","setItem","stringify","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","url","paletteType","darkTheme","createMuiTheme","palette","todayDate","Date","prevValue","src","SunLogo","height","width","alt","MoonLogo","ThemeProvider","theme","FormControl","Select","variant","onChange","MenuItem","toLocaleString","day","month","year","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.064d8c96.chunk.js","sourcesContent":["import React from 'react';\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, active, casesType, cases, total, ...props }) {\n    const infoClass = \"infoBox-\" + title;\n    return (\n        <div>\n            <div onClick={props.onClick} className={`infoBox ${infoClass} ${active && \"infoBox-selected-\"+title}`}>\n                <div>\n                    <h5 className=\"infoBox-title\" color=\"textSecondary\">{title}</h5>\n                    <h4 className=\"infoBox-cases\">{cases}</h4>\n                    <h1 className=\"infoBox-total\" color=\"textSecondary\">{total}</h1>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default InfoBox\n","import React from 'react';\r\nimport \"./Table.css\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"mytable\">\r\n            <div className=\"roww heading\">\r\n                <div className=\"celll heading\">\r\n                    <div>Country</div>\r\n                </div>\r\n                <div className=\"celll heading\">\r\n                    <div>Confirmed</div>\r\n                </div>\r\n                <div className=\"celll heading\">\r\n                    <div>Active</div>\r\n                </div>\r\n                <div className=\"celll heading\">\r\n                    <div>Recovered</div>\r\n                </div>\r\n                <div className=\"celll heading\">\r\n                    <div>Deceased</div>\r\n                </div>\r\n            </div>\r\n            \r\n            { countries.map(({ country, cases, active, recovered, deaths, todayCases, todayRecovered, todayDeaths }) => (\r\n                <div className=\"roww\">\r\n                    <div className=\"celll\">\r\n                        <div className=\"country-name\">{country}</div>\r\n                    </div>\r\n                    <div className=\"celll statistic\">\r\n                        {todayCases===0 ? null : (<div className=\"today-confirmed\">{\"+\"+todayCases}</div>)}\r\n                        <div className=\"total\">{cases}</div>\r\n                    </div>\r\n                    <div className=\"celll statistic\">\r\n                        <div className=\"total\">{active}</div>\r\n                    </div>\r\n                    <div className=\"celll statistic\">\r\n                        {todayCases===0 ? null : (<div className=\"today-recovered\">{\"+\"+todayRecovered}</div>)}\r\n                        <div className=\"total\">{recovered}</div>\r\n                    </div>\r\n                    <div className=\"celll statistic\">\r\n                        {todayCases===0 ? null : (<div className=\"today-deaths\">{\"+\"+todayDeaths}</div>)}\r\n                        <div className=\"total\">{deaths}</div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#ff073a\",\n      multiplier: 800,\n    },\n    active: {\n        hex: \"#007bff\",\n        multiplier: 1000,\n    },\n    recovered: {\n      hex: \"#28a745\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#6c757d\",\n      multiplier: 2000,\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));\n}\n\nexport const prettyPrintStat = (stat) => stat? `${numeral(stat).format(\"0.0a\")}`: \"0\";\n\nexport const showDataOnMap = (data, casesType) => {\n    return data.map(country => {\n        return <Circle\n        center={[country.countryInfo.lat, country.countryInfo.long]}\n        fillOpacity={0.4}\n        weight={1}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\n        >\n            <Popup>\n                <div className=\"info-container\">\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-active\">Active: {numeral(country.active).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    });\n}","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./LineGraph.css\";\n\nconst options = {\n  responsive: true,\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  // maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: true,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date],\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  const lineColors = {\n    cases: {\n      border: \"#ff073a\",\n      bg: \"rgba(255, 7, 58, 0.125)\"\n    },\n    recovered: {\n      border: \"#28a745\",\n      bg: \"rgba(40, 167, 69, 0.125)\"\n    },\n    deaths: {\n      border: \"#6c757d\",\n      bg: \"rgba(108, 117, 125, 0.125)\"\n    },\n  }\n\n  return (\n    <div className={\"linegraph-\" + casesType}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: lineColors[casesType].bg,\n                borderColor: lineColors[casesType].border,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n\n\n//********************** TO FIND ACTIVE CASES HISTORY ***********************\n\n// for (let date in data.timeline.cases) {\n//   let newDataPoint = {\n//     x: date,\n//     y: data.timeline.cases[date] - data.timeline.recovered[date] - data.timeline.deaths[date]\n//   };\n//   chartData.push(newDataPoint);\n// }\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { Line } from \"react-chartjs-2\";\n// import numeral from \"numeral\";\n\n// const options = {\n//     legend: {\n//       display: false,\n//     },\n//     elements: {\n//       point: {\n//         radius: 0,\n//       },\n//     },\n//     maintainAspectRatio: false,\n//     tooltips: {\n//       mode: \"index\",\n//       intersect: false,\n//       callbacks: {\n//         label: function (tooltipItem, data) {\n//           return numeral(tooltipItem.value).format(\"+0,0\");\n//         },\n//       },\n//     },\n//     scales: {\n//       xAxes: [\n//         {\n//           type: \"time\",\n//           time: {\n//             format: \"MM/DD/YY\",\n//             tooltipFormat: \"ll\",\n//           },\n//         },\n//       ],\n//       yAxes: [\n//         {\n//           gridLines: {\n//             display: false,\n//           },\n//           ticks: {\n//             callback: function (value, index, values) {\n//               return numeral(value).format(\"0a\");\n//             },\n//           },\n//         },\n//       ],\n//     },\n// };\n\n// const buildChartData = (data, casesType) => {\n//     const chartData = [];\n//     let lastDataPoint;\n//     for(let date in data.cases) {\n//         if(lastDataPoint) {\n//             const newDataPoint = {\n//                 x: date,\n//                 y: data[casesType][date] - lastDataPoint\n//             }\n//             chartData.push(newDataPoint);\n//         }\n//         lastDataPoint = data[casesType][date];\n//     }\n//     return chartData;\n// }\n\n// function LineGraph(props) {\n//     const [data, setData] = useState([]);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n//             .then(response => response.json())\n//             .then(data => {\n//                 let chartData = buildChartData(data, props.casesType);\n//                 setData(chartData);\n//             })\n//         }\n//         fetchData();\n//     }, []);\n\n//     return (\n//         <div>\n//             {data?.length && (\n//                 <Line\n//                 options={options}\n//                 data={{\n//                     datasets: [{\n//                         backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n//                         borderColor: '#CC1034',\n//                         data: data\n//                     }]\n//                 }} />\n//             )}\n//         </div>\n//     )\n// }\n\n// export default LineGraph\n","import React from 'react';\nimport { Map as LeafletMap, GeoJSON } from \"react-leaflet\";\nimport mapData from \"./countries.json\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ casesType, countries, center, zoom, dark }) {\n\n    // const mapColors = {\n    //     cases: {\n    //         hex: \"#ff073a\"\n    //     },\n    //     active: {\n    //         hex: \"#007bff\"\n    //     },\n    //     recovered: {\n    //         hex: \"#28a745\"\n    //     },\n    //     deaths: {\n    //         hex: \"#6c757d\"\n    //     }\n    // }\n\n    // const [ mapColor, setMapColor] = useState( mapColors[casesType] );\n    // // const [countryStyle, setcountryStyle] = useState({ fillColor: \"transparent\", color: \"#ff073a\", weight: 0.5, });\n\n    // useEffect(() => {\n    //     const changeMapColor = () => {\n    //         setMapColor(mapColors[casesType]);\n    //     }\n    //     changeMapColor();\n    // },[casesType, mapColors]);\n\n    // const mapColor = dark ? \"#bdbdbd\" : \"#111\";\n\n    const countryStyle = { fillColor: \"transparent\", color: \"#919191\", weight: 0.5, }\n\n    return (\n        <div>\n            <LeafletMap className=\"mymap\" zoom={zoom} center={center}>\n                <GeoJSON\n                style={countryStyle}\n                data={mapData.features} />\n                {showDataOnMap(countries,casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React, { useState, useEffect } from 'react';\nimport { FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\";\nimport InfoBox from \"./InfoBox\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport Map from \"./Map\";\nimport numeral from \"numeral\";\nimport './App.css';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport SunLogo from \"./sunlogo.png\";\nimport MoonLogo from \"./moon.svg\";\n\nfunction App() {\n\n\tconst getInitialMode = () => {\n\t\tconst savedMode = JSON.parse(localStorage.getItem('dark'));\n\t\treturn savedMode || false;\n\t}\n\n\tconst [darkMode, setDarkMode] = useState(getInitialMode());\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState(\"worldwide\");\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [mapCenter, setMapCenter] = useState({lat: 0, lng: 0});\n\tconst [mapZoom, setMapZoom] = useState(2);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState(\"active\");\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('dark', JSON.stringify(darkMode));\n\t},[darkMode]);\n\n\tuseEffect(()=>{\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tsetCountryInfo(data);\n\t\t})\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tconst countries = data.map(country => ({\n\t\t\t\t\tname: country.country,\n\t\t\t\t\tvalue: country.countryInfo.iso2\n\t\t\t\t}));\n\t\t\t\tconst sortedData = sortData(data)\n\t\t\t\tsetTableData(sortedData);\n\t\t\t\tsetMapCountries(data);\n\t\t\t\tsetCountries(countries);\n\t\t\t});\n\t\t}\n\t\tgetCountriesData();\n\t},[]);\n\n\tconst onCountryChange = async (event) => {\n\t\tconst countryCode = event.target.value;\n\t\tconst url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\tawait fetch(url)\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tconst [lat,lng] = countryCode === \"worldwide\" ? [ 34.80746, -40.4796] : [data.countryInfo.lat, data.countryInfo.long];\n\t\t\tsetCountry(countryCode);\n\t\t\tsetCountryInfo(data);\n\t\t\tsetMapCenter([lat,lng]);\n\t\t\tsetMapZoom(4);\n\t\t});\n\t}\n\n\tconst paletteType = darkMode ? \"dark\" : \"light\" ;\n\n\tconst darkTheme = createMuiTheme({\n\t\tpalette: {\n\t\t\ttype: paletteType,\n\t\t}\n\t});\n\n\tconst todayDate = new Date();\n\n\treturn (\n\t\t<div className={`App ${ darkMode? \"dark-mode\" : \"light-mode\" }`}>\n\t\t\t<div className=\"home\">\n\t\t\t\t<div className=\"app-theme\">\n\t\t\t\t\t<button className=\"theme-button\" onClick={() => setDarkMode(prevValue => !prevValue)}>{darkMode ? <img className=\"light-logo\" src={SunLogo} height={25} width={25} color={\"#ff073a\"} alt=\"Light\" /> : <img className=\"dark-logo\" height={25} width={25} src={MoonLogo} alt=\"Dark\" />}</button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app-left\">\n\t\t\t\t\t<div className=\"app-header\">\n\t\t\t\t\t\t<div className=\"app-search\">\n\t\t\t\t\t\t\t<h6>Select your Country</h6>\n\t\t\t\t\t\t\t<div className=\"line\"></div>\n\t\t\t\t\t\t\t<ThemeProvider theme={darkTheme}>\n\t\t\t\t\t\t\t\t<FormControl className=\"app-dropdown\">\n\t\t\t\t\t\t\t\t\t<Select className=\"app-select\" variant=\"outlined\" onChange={onCountryChange} value={country}>\n\t\t\t\t\t\t\t\t\t\t<MenuItem style={{backgroundColor: '#161625', color: '#bdbdbd'}} className=\"app-menutitem\" value=\"worldwide\">Worldwide</MenuItem>\n\t\t\t\t\t\t\t\t\t\t{countries.map(country =>(\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem style={{backgroundColor: '#161625', color: '#bdbdbd'}} value={country.value}>{country.name}</MenuItem>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t</ThemeProvider>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h5 className=\"app-date\">{todayDate.toLocaleString('en-GB',{day:'numeric', month:'short', year:'numeric'})}</h5>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"app-stats\">\n\t\t\t\t\t\t<InfoBox className=\"infoitem confirmedBox\" casesType={casesType} active={casesType === \"cases\"} onClick={e => setCasesType('cases')} title=\"Cases\" cases={\"+\"+numeral(countryInfo.todayCases).format(\"0,0\")} total={numeral(countryInfo.cases).format(\"0,0\")} />\n\t\t\t\t\t\t<InfoBox className=\"infoitem activeBox\" casesType={casesType} active={casesType === \"active\"} onClick={e => setCasesType('active')} title=\"Active\" cases={\"\\n\"} total={numeral(countryInfo.active).format(\"0,0\")} />\n\t\t\t\t\t\t<InfoBox className=\"infoitem recoveredBox\" casesType={casesType} active={casesType === \"recovered\"} onClick={e => setCasesType('recovered')} title=\"Recovered\" cases={\"+\"+numeral(countryInfo.todayRecovered).format(\"0,0\")} total={numeral(countryInfo.recovered).format(\"0,0\")} />\n\t\t\t\t\t\t<InfoBox className=\"infoitem deathBox\" casesType={casesType} active={casesType === \"deaths\"} onClick={e => setCasesType('deaths')} title=\"Deaths\" cases={\"+\"+numeral(countryInfo.todayDeaths).format(\"0,0\")} total={numeral(countryInfo.deaths).format(\"0,0\")} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"app-mytable\">\n\t\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app-right\">\n\t\t\t\t\t<div className=\"app-map\">\n\t\t\t\t\t\t<div className=\"app-title\">\n\t\t\t\t\t\t\t<h1>COVID 19</h1>\n\t\t\t\t\t\t\t{/* <input type=\"button\" action=\"toggle\" /> */}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"geomap\">\n\t\t\t\t\t\t\t<Map dark={darkMode} casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"app-graph\">\n\t\t\t\t\t\t<h4 className=\"linegraph-title\">Confirmed</h4>\n\t\t\t\t\t\t<LineGraph casesType='cases' />\n\t\t\t\t\t\t<h4 className=\"linegraph-title\">Recovered</h4>\n\t\t\t\t\t\t<LineGraph casesType='recovered' />\n\t\t\t\t\t\t<h4 className=\"linegraph-title\">Deaths</h4>\n\t\t\t\t\t\t<LineGraph casesType='deaths' />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sunlogo.518dd258.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.ded2ae8c.svg\";"],"sourceRoot":""}